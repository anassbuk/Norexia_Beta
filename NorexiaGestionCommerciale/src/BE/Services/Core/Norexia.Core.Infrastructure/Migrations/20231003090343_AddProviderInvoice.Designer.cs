// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Norexia.Core.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Norexia.Core.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231003090343_AddProviderInvoice")]
    partial class AddProviderInvoice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Norexia.Core.Domain.CreditNoteEntities.CreditNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CreditAction")
                        .HasColumnType("integer");

                    b.Property<double>("CreditAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime?>("CreditNoteDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreditNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CreditOrigin")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Raison")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Responsable")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CreditNotes", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CreditNoteEntities.CreditNoteLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("CreditNoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("DeliveryRef")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpectedQty")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("SellingPriceId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int?>("VAT")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellingPriceId");

                    b.ToTable("CreditNoteLines", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CustomerEntities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("text");

                    b.Property<string>("CompanyFax")
                        .HasColumnType("text");

                    b.Property<string>("CompanyTel")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<string>("ICE")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialReason")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCategoryId");

                    b.ToTable("Customer", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CustomerEntities.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Localisation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StreetAdress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddress", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CustomerEntities.CustomerCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("CustomerCategory", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.DeliveryEntities.Deliverer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceProvider")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Deliverer", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.DeliveryEntities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DelivererId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeliveryMode")
                        .HasColumnType("integer");

                    b.Property<int>("DeliveryOrigin")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Situation")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("Deliveries", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.DeliveryEntities.DeliveryLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpectedQty")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("SellingPriceId")
                        .HasColumnType("uuid");

                    b.Property<double?>("UnitPrice")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<int?>("VAT")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellingPriceId");

                    b.ToTable("DeliveryLines", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.InvoiceEntities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveryEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryRef")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveryStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectCreationReason")
                        .HasColumnType("text");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceOrigin")
                        .HasColumnType("integer");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("Invoices", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.InvoiceEntities.InvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DeliveryRef")
                        .HasColumnType("text");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpectedQty")
                        .HasColumnType("integer");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("SellingPriceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("VAT")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellingPriceId");

                    b.ToTable("InvoiceLines", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PaymentEntities.InvoicePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double?>("AmountPaid")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountToBePaid")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountToBePaidPercentage")
                        .HasColumnType("double precision");

                    b.Property<string>("Bank")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("PaymentMeanId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentMeanId");

                    b.ToTable("InvoicePayments", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PaymentEntities.SalePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double?>("AmountPaid")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountToBePaid")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountToBePaidPercentage")
                        .HasColumnType("double precision");

                    b.Property<string>("Bank")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("PaymentMeanId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMeanId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SalePayments", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ClassKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClassKeys", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ClassValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductClassKeyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.HasKey("Id");

                    b.HasIndex("ProductClassKeyId");

                    b.ToTable("ClassValues", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentFamilyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentFamilyId");

                    b.ToTable("Families", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.PriceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("PriceGroup", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Action")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LongDesignation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("ShortDesignation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Product", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ProductAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ProductAvailability", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ProductNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductNote", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.SellingPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double?>("Margin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<Guid?>("PriceGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("VAT")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PriceGroupId");

                    b.HasIndex("ProductId");

                    b.ToTable("SellingPrice", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.UnitMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)");

                    b.Property<Guid?>("UnitTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("UnitMeasurements", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.UnitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)");

                    b.HasKey("Id");

                    b.ToTable("UnitTypes", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderEntities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("text");

                    b.Property<string>("CompanyFax")
                        .HasColumnType("text");

                    b.Property<string>("CompanyTel")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Function")
                        .HasColumnType("text");

                    b.Property<string>("ICE")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("ProviderCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProviderType")
                        .HasColumnType("integer");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialReason")
                        .HasColumnType("text");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderCategoryId");

                    b.ToTable("Provider", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderEntities.ProviderAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Complement")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Localisation")
                        .HasColumnType("text");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("StreetAdress")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderAddress", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderEntities.ProviderCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ProviderCategory", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderInvoiceEntities.ProviderInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("DigitalInvoicePath")
                        .HasColumnType("text");

                    b.Property<string>("DirectCreationReason")
                        .HasColumnType("text");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProviderInvoiceOrigin")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("ProviderInvoices", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderInvoiceEntities.ProviderInvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpectedQty")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProviderInvoiceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .HasColumnType("integer");

                    b.Property<int?>("VAT")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderInvoiceId");

                    b.ToTable("ProviderInvoiceLines", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("PurchaseOrders", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("VAT")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderLines", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.QuotationEntities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeliveryMode")
                        .HasColumnType("integer");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("QuotationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("Responsable")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("ValidityDuration")
                        .HasColumnType("integer");

                    b.Property<int?>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Quotations", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.QuotationEntities.QuotationLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<double?>("Margin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("QuotationID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SellingPriceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("VAT")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotationID");

                    b.HasIndex("SellingPriceId");

                    b.ToTable("QuotationsLines", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.SaleOrderEntities.PaymentMean", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMean", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("226cf844-31b0-47c1-b893-52240622ec48"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Carte bancaire"
                        },
                        new
                        {
                            Id = new Guid("9f933b02-3984-444c-9e65-32910b55fc92"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Virement"
                        },
                        new
                        {
                            Id = new Guid("0eb5afc3-56b8-4bfd-9e05-ae373b17be95"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Chèque"
                        });
                });

            modelBuilder.Entity("Norexia.Core.Domain.SaleOrderEntities.PaymentTerms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("DepositInvoice")
                        .HasColumnType("boolean");

                    b.Property<int>("DepositInvoiceDownPayment")
                        .HasColumnType("integer");

                    b.Property<bool>("DepositInvoiceNegotiable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("MaturityDuration")
                        .HasColumnType("integer");

                    b.Property<bool>("MaturityDurationNegotiable")
                        .HasColumnType("boolean");

                    b.Property<bool>("PaymentByInstallments")
                        .HasColumnType("boolean");

                    b.Property<bool>("PaymentByInstallmentsNegotiable")
                        .HasColumnType("boolean");

                    b.Property<int>("PaymentByInstallmentsNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentOption")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcf10cc7-e493-4431-b8b2-5615f25c1912"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepositInvoice = true,
                            DepositInvoiceDownPayment = 10,
                            DepositInvoiceNegotiable = true,
                            IsDeleted = false,
                            MaturityDuration = 30,
                            MaturityDurationNegotiable = true,
                            PaymentByInstallments = true,
                            PaymentByInstallmentsNegotiable = true,
                            PaymentByInstallmentsNumber = 3,
                            PaymentOption = 0
                        });
                });

            modelBuilder.Entity("Norexia.Core.Domain.SaleOrderEntities.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryMode")
                        .HasColumnType("integer");

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<int>("Execution")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<Guid?>("SaleChannelId")
                        .HasColumnType("uuid");

                    b.Property<int>("SaleOrderOrigin")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("SaleChannelId");

                    b.ToTable("SaleOrders", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.SaleOrderEntities.SaleOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double?>("Margin")
                        .HasColumnType("double precision");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SellingPriceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("VAT")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("SellingPriceId");

                    b.ToTable("SaleOrderLines", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.SettingEntities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26bad4d4-6575-4dd1-9aaa-8d84c51143f9"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            IsDeleted = false,
                            Name = "MAD"
                        });
                });

            modelBuilder.Entity("Norexia.Core.Domain.SettingEntities.VAT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("VAT", "app");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76fa42f5-04bb-4d63-94af-fb625d4ded36"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDefault = true,
                            IsDeleted = false,
                            Value = 0.02m
                        });
                });

            modelBuilder.Entity("Norexia.Core.Domain.StockEntities.StockEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("StockEntryOrigin")
                        .HasColumnType("integer");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("StockEntries", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.StockEntities.StockEntryLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Qty")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("StockEntryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockEntryId");

                    b.ToTable("StockEntryLines", "app");
                });

            modelBuilder.Entity("ProductAssignedAvailabilities", b =>
                {
                    b.Property<Guid>("ProductAvailabilityForeignKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductForeignKey")
                        .HasColumnType("uuid");

                    b.HasKey("ProductAvailabilityForeignKey", "ProductForeignKey");

                    b.HasIndex("ProductForeignKey");

                    b.ToTable("ProductAssignedAvailabilities", "app");
                });

            modelBuilder.Entity("ProductClassValues", b =>
                {
                    b.Property<Guid>("ClassValueForeignKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductForeignKey")
                        .HasColumnType("uuid");

                    b.HasKey("ClassValueForeignKey", "ProductForeignKey");

                    b.HasIndex("ProductForeignKey");

                    b.ToTable("ProductClassValues", "app");
                });

            modelBuilder.Entity("ProductUnitMeasurements", b =>
                {
                    b.Property<Guid>("ProductForeignKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitMeasurementForeignKey")
                        .HasColumnType("uuid");

                    b.HasKey("ProductForeignKey", "UnitMeasurementForeignKey");

                    b.HasIndex("UnitMeasurementForeignKey");

                    b.ToTable("ProductUnitMeasurements", "app");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CreditNoteEntities.CreditNote", b =>
                {
                    b.HasOne("Norexia.Core.Domain.CustomerEntities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Norexia.Core.Domain.InvoiceEntities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CreditNoteEntities.CreditNoteLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.CreditNoteEntities.CreditNote", "CreditNote")
                        .WithMany("CreditNoteLines")
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.ProductEntities.SellingPrice", "SellingPrice")
                        .WithMany()
                        .HasForeignKey("SellingPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditNote");

                    b.Navigation("Product");

                    b.Navigation("SellingPrice");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CustomerEntities.Customer", b =>
                {
                    b.HasOne("Norexia.Core.Domain.CustomerEntities.CustomerCategory", "CustomerCategory")
                        .WithMany()
                        .HasForeignKey("CustomerCategoryId");

                    b.Navigation("CustomerCategory");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CustomerEntities.CustomerAddress", b =>
                {
                    b.HasOne("Norexia.Core.Domain.CustomerEntities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Norexia.Core.Domain.DeliveryEntities.Delivery", b =>
                {
                    b.HasOne("Norexia.Core.Domain.CustomerEntities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Norexia.Core.Domain.DeliveryEntities.Deliverer", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId");

                    b.HasOne("Norexia.Core.Domain.InvoiceEntities.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Norexia.Core.Domain.SaleOrderEntities.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId");

                    b.Navigation("Customer");

                    b.Navigation("Deliverer");

                    b.Navigation("Invoice");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Norexia.Core.Domain.DeliveryEntities.DeliveryLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.DeliveryEntities.Delivery", "Delivery")
                        .WithMany("DeliveryLines")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Norexia.Core.Domain.ProductEntities.SellingPrice", "SellingPrice")
                        .WithMany()
                        .HasForeignKey("SellingPriceId");

                    b.Navigation("Delivery");

                    b.Navigation("Product");

                    b.Navigation("SellingPrice");
                });

            modelBuilder.Entity("Norexia.Core.Domain.InvoiceEntities.Invoice", b =>
                {
                    b.HasOne("Norexia.Core.Domain.SettingEntities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Norexia.Core.Domain.CustomerEntities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Norexia.Core.Domain.SaleOrderEntities.SaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId");

                    b.OwnsOne("Norexia.Core.Domain.SaleOrderEntities.OwnedPaymentTerms", "PaymentTerms", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uuid");

                            b1.Property<bool?>("DepositInvoice")
                                .HasColumnType("boolean");

                            b1.Property<int?>("DepositInvoiceDownPayment")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaturityDuration")
                                .HasColumnType("integer");

                            b1.Property<bool?>("PaymentByInstallments")
                                .HasColumnType("boolean");

                            b1.Property<int?>("PaymentByInstallmentsNumber")
                                .HasColumnType("integer");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "app");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("PaymentTerms")
                        .IsRequired();

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Norexia.Core.Domain.InvoiceEntities.InvoiceLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.InvoiceEntities.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.ProductEntities.SellingPrice", "SellingPrice")
                        .WithMany()
                        .HasForeignKey("SellingPriceId");

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("SellingPrice");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PaymentEntities.InvoicePayment", b =>
                {
                    b.HasOne("Norexia.Core.Domain.InvoiceEntities.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Norexia.Core.Domain.SaleOrderEntities.PaymentMean", "PaymentMean")
                        .WithMany()
                        .HasForeignKey("PaymentMeanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PaymentMean");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PaymentEntities.SalePayment", b =>
                {
                    b.HasOne("Norexia.Core.Domain.SaleOrderEntities.PaymentMean", "PaymentMean")
                        .WithMany()
                        .HasForeignKey("PaymentMeanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.SaleOrderEntities.SaleOrder", "SaleOrder")
                        .WithMany("SalePayments")
                        .HasForeignKey("SaleOrderId");

                    b.Navigation("PaymentMean");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ClassValue", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.ClassKey", "ProductClassKey")
                        .WithMany("Values")
                        .HasForeignKey("ProductClassKeyId");

                    b.Navigation("ProductClassKey");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.Family", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Family", "ParentFamily")
                        .WithMany("SubFamilies")
                        .HasForeignKey("ParentFamilyId");

                    b.Navigation("ParentFamily");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.Product", b =>
                {
                    b.OwnsOne("Norexia.Core.Domain.ProductEntities.ClassificationInfo", "ClassificationInfo", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("FamilyId")
                                .HasColumnType("uuid");

                            b1.HasKey("ProductId");

                            b1.HasIndex("FamilyId");

                            b1.ToTable("Product", "app");

                            b1.HasOne("Norexia.Core.Domain.ProductEntities.Family", "Family")
                                .WithMany()
                                .HasForeignKey("FamilyId");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Family");
                        });

                    b.OwnsOne("Norexia.Core.Domain.ProductEntities.PurchaseInfo", "PurchaseInfo", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("Price")
                                .HasColumnType("numeric");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product", "app");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Norexia.Core.Domain.ProductEntities.SellInfo", "SellInfo", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .HasColumnType("text");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product", "app");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Norexia.Core.Domain.ProductEntities.StorageSupplyInfo", "StorageSupplyInfo", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("BatchSize")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaximumStock")
                                .HasColumnType("integer");

                            b1.Property<int?>("MinimumStock")
                                .HasColumnType("integer");

                            b1.Property<int?>("Quantity")
                                .HasColumnType("integer");

                            b1.Property<int?>("RetentionPeriod")
                                .HasColumnType("integer");

                            b1.Property<int?>("SafetyStock")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product", "app");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Norexia.Core.Domain.ProductEntities.UnitInfo", "UnitInfo", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsBalance")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsDecimal")
                                .HasColumnType("boolean");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product", "app");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("ClassificationInfo")
                        .IsRequired();

                    b.Navigation("PurchaseInfo")
                        .IsRequired();

                    b.Navigation("SellInfo")
                        .IsRequired();

                    b.Navigation("StorageSupplyInfo")
                        .IsRequired();

                    b.Navigation("UnitInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ProductImage", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ProductNote", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", null)
                        .WithMany("Notes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.SellingPrice", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.PriceGroup", "PriceGroup")
                        .WithMany()
                        .HasForeignKey("PriceGroupId");

                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", null)
                        .WithMany("SellingPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceGroup");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.UnitMeasurement", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.UnitType", "UnitType")
                        .WithMany("Measurements")
                        .HasForeignKey("UnitTypeId");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderEntities.Provider", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProviderEntities.ProviderCategory", "ProviderCategory")
                        .WithMany()
                        .HasForeignKey("ProviderCategoryId");

                    b.Navigation("ProviderCategory");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderEntities.ProviderAddress", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProviderEntities.Provider", "Provider")
                        .WithMany("ProviderAddresses")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderInvoiceEntities.ProviderInvoice", b =>
                {
                    b.HasOne("Norexia.Core.Domain.SettingEntities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Norexia.Core.Domain.ProviderEntities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.OwnsOne("Norexia.Core.Domain.SaleOrderEntities.OwnedPaymentTerms", "PaymentTerms", b1 =>
                        {
                            b1.Property<Guid>("ProviderInvoiceId")
                                .HasColumnType("uuid");

                            b1.Property<bool?>("DepositInvoice")
                                .HasColumnType("boolean");

                            b1.Property<int?>("DepositInvoiceDownPayment")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaturityDuration")
                                .HasColumnType("integer");

                            b1.Property<bool?>("PaymentByInstallments")
                                .HasColumnType("boolean");

                            b1.Property<int?>("PaymentByInstallmentsNumber")
                                .HasColumnType("integer");

                            b1.HasKey("ProviderInvoiceId");

                            b1.ToTable("ProviderInvoices", "app");

                            b1.WithOwner()
                                .HasForeignKey("ProviderInvoiceId");
                        });

                    b.Navigation("Currency");

                    b.Navigation("PaymentTerms");

                    b.Navigation("Provider");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderInvoiceEntities.ProviderInvoiceLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.ProviderInvoiceEntities.ProviderInvoice", "ProviderInvoice")
                        .WithMany("ProviderInvoiceLines")
                        .HasForeignKey("ProviderInvoiceId");

                    b.Navigation("Product");

                    b.Navigation("ProviderInvoice");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrder", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProviderEntities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrderLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Norexia.Core.Domain.QuotationEntities.Quotation", b =>
                {
                    b.HasOne("Norexia.Core.Domain.CustomerEntities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.OwnsOne("Norexia.Core.Domain.SaleOrderEntities.OwnedPaymentTerms", "PaymentTerms", b1 =>
                        {
                            b1.Property<Guid>("QuotationId")
                                .HasColumnType("uuid");

                            b1.Property<bool?>("DepositInvoice")
                                .HasColumnType("boolean");

                            b1.Property<int?>("DepositInvoiceDownPayment")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaturityDuration")
                                .HasColumnType("integer");

                            b1.Property<bool?>("PaymentByInstallments")
                                .HasColumnType("boolean");

                            b1.Property<int?>("PaymentByInstallmentsNumber")
                                .HasColumnType("integer");

                            b1.HasKey("QuotationId");

                            b1.ToTable("Quotations", "app");

                            b1.WithOwner()
                                .HasForeignKey("QuotationId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("PaymentTerms")
                        .IsRequired();
                });

            modelBuilder.Entity("Norexia.Core.Domain.QuotationEntities.QuotationLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.QuotationEntities.Quotation", "Quotation")
                        .WithMany("QuotationLines")
                        .HasForeignKey("QuotationID");

                    b.HasOne("Norexia.Core.Domain.ProductEntities.SellingPrice", "SellingPrice")
                        .WithMany()
                        .HasForeignKey("SellingPriceId");

                    b.Navigation("Product");

                    b.Navigation("Quotation");

                    b.Navigation("SellingPrice");
                });

            modelBuilder.Entity("Norexia.Core.Domain.SaleOrderEntities.SaleOrder", b =>
                {
                    b.HasOne("Norexia.Core.Domain.CustomerEntities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Norexia.Core.Domain.QuotationEntities.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationId");

                    b.HasOne("Norexia.Core.Domain.ProductEntities.ProductAvailability", "SaleChannel")
                        .WithMany()
                        .HasForeignKey("SaleChannelId");

                    b.OwnsOne("Norexia.Core.Domain.SaleOrderEntities.OwnedPaymentTerms", "PaymentTerms", b1 =>
                        {
                            b1.Property<Guid>("SaleOrderId")
                                .HasColumnType("uuid");

                            b1.Property<bool?>("DepositInvoice")
                                .HasColumnType("boolean");

                            b1.Property<int?>("DepositInvoiceDownPayment")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaturityDuration")
                                .HasColumnType("integer");

                            b1.Property<bool?>("PaymentByInstallments")
                                .HasColumnType("boolean");

                            b1.Property<int?>("PaymentByInstallmentsNumber")
                                .HasColumnType("integer");

                            b1.HasKey("SaleOrderId");

                            b1.ToTable("SaleOrders", "app");

                            b1.WithOwner()
                                .HasForeignKey("SaleOrderId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("PaymentTerms")
                        .IsRequired();

                    b.Navigation("Quotation");

                    b.Navigation("SaleChannel");
                });

            modelBuilder.Entity("Norexia.Core.Domain.SaleOrderEntities.SaleOrderLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.SaleOrderEntities.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("SaleOrderId");

                    b.HasOne("Norexia.Core.Domain.ProductEntities.SellingPrice", "SellingPrice")
                        .WithMany()
                        .HasForeignKey("SellingPriceId");

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");

                    b.Navigation("SellingPrice");
                });

            modelBuilder.Entity("Norexia.Core.Domain.StockEntities.StockEntry", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProviderEntities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("Provider");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Norexia.Core.Domain.StockEntities.StockEntryLine", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Norexia.Core.Domain.StockEntities.StockEntry", null)
                        .WithMany("StockEntryLines")
                        .HasForeignKey("StockEntryId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductAssignedAvailabilities", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.ProductAvailability", null)
                        .WithMany()
                        .HasForeignKey("ProductAvailabilityForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductClassValues", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.ClassValue", null)
                        .WithMany()
                        .HasForeignKey("ClassValueForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductUnitMeasurements", b =>
                {
                    b.HasOne("Norexia.Core.Domain.ProductEntities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Norexia.Core.Domain.ProductEntities.UnitMeasurement", null)
                        .WithMany()
                        .HasForeignKey("UnitMeasurementForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Norexia.Core.Domain.CreditNoteEntities.CreditNote", b =>
                {
                    b.Navigation("CreditNoteLines");
                });

            modelBuilder.Entity("Norexia.Core.Domain.CustomerEntities.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("Norexia.Core.Domain.DeliveryEntities.Delivery", b =>
                {
                    b.Navigation("DeliveryLines");
                });

            modelBuilder.Entity("Norexia.Core.Domain.InvoiceEntities.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");

                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.ClassKey", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.Family", b =>
                {
                    b.Navigation("SubFamilies");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Notes");

                    b.Navigation("SellingPrices");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProductEntities.UnitType", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderEntities.Provider", b =>
                {
                    b.Navigation("ProviderAddresses");
                });

            modelBuilder.Entity("Norexia.Core.Domain.ProviderInvoiceEntities.ProviderInvoice", b =>
                {
                    b.Navigation("ProviderInvoiceLines");
                });

            modelBuilder.Entity("Norexia.Core.Domain.PurchaseOrderEntities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Norexia.Core.Domain.QuotationEntities.Quotation", b =>
                {
                    b.Navigation("QuotationLines");
                });

            modelBuilder.Entity("Norexia.Core.Domain.SaleOrderEntities.SaleOrder", b =>
                {
                    b.Navigation("SaleOrderLines");

                    b.Navigation("SalePayments");
                });

            modelBuilder.Entity("Norexia.Core.Domain.StockEntities.StockEntry", b =>
                {
                    b.Navigation("StockEntryLines");
                });
#pragma warning restore 612, 618
        }
    }
}
